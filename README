ePoPE -- README
====================

This package is designed to encode the gain and loss history of aligned
genes across metazoan genomes. The phylogenetic tree is fixed. In future
releases, there will be tools that can adopt any arbitrary phylogenetic
tree and incorporate it into the programs pipeline.

In the first step (forward recursion) the inner nodes are scored according
to the score of their children. The score is initialized in correspondence
to the number of copies of the gene for each species in the input
alignment.

The second step produces an optimal solution for the number of miRNAs at
each inner node by backtracing the score array. In this step, the number of
gained or lost miRNAs is also computed and assigned to the appropriate
node.

Finally, the tree, containing an optimal solution for the number of copies
at each node and the number of gained and lost miRNAs is returned in two
ways: a) a postscript file that visualizes the tree and b) a space
seperated table file of the tree that can be used for statistical analyses,
for example.

Installation:
-------------

$ make

Usage:
------

$ ./ePoPE

+--------------------------------------------------+
| ePoPE 2.1                                        |
|                                                  |
| ePoPE - efficent Prediction of Paralog Evolution |
+==================================================+

ePoPE predicts a maximal parsimony solution of gain and loss events of a gene family with paralogs. 
The partition function variant only can be applied with the -z option or together with the Sankoff version 
with the -b option.

A new summary tool called ePoPE_run.sh calls multiple alignments over one tree, then summarizes all outputfiles, creates an 
annotated svg tree("all_output_tree.svg") with gain and losses for all 3 options (Sankoff, Partition Function, Partition Function -P) and gives
3 plots. First plot is called "gain_loss_whole_tree" and gives the relative gain and loss from every node in the tree, sorted
from top to bottom corresponding to the svg tree. The other two plots gives the sums of the total gain and loss events for all 3 options 
respectively the sums of the relative gain and loss events for all 3 options.

Usage: ePoPE [ arguments ] -i ALNFILE -t TREEFILE (or -n NEWICK-TREEFILE)

arguments: [-o OUTFILE] [-p PS-OUTFILE]
           [-h,--help] [-v,--version]
           [-T NUMBER]
           [-z] [-b] [-C] [-P]

-i FILE              Input alignment FILE in CLUSTALW/STOCKHOLM format. [REQUIRED]
-t FILE              Input tree FILE see collapsed_tree.dat format. [REQUIRED]
-n FILE              Input tree FILE in newick format. [REQUIRED]
-w FILE              Input weight array FILE. [OPTIONAL]
-o FILE              Output FILE for tree data. Default is writing to stdout.[OPTIONAL]
-p FILE              Output FILE for PS-tree data. Default is 'INFILE.ps'. [OPTIONAL]
-T NUMBER			 setting the temperature T in the Boltzmann distribution of the partition function variant	
-z                   Calculating partition function.
-b                   Calculating both, partition function and parsimony scores.
-C                   suppress the collapse of inner nodes with a degree of two.
-P                   setting the number of genes to the highest probability value in back-recursion.
-h,--help            Show this help message.
-v,--version         Show version information.

Example call:

        ./ePoPE -i example/alignments/MIPF0000005_mir-30.stk -t example/collapsed_tree.dat -o example/out.dat -p example/out.ps -b



Example prompt:

		Arguments:
		-----------
		Input aln file:                     example/alignments/MIPF0000005_mir-30.stk
		Input tree file:                    example/collapsed_tree.dat
		Output file:                        example/out_PSb.out
		2. Output file:                     example/out_PFb.out
		PS-output file:                     example/out_PS_PF.ps
		-P is set to:                       0
		-C is set to:                       0
		-z is set to:                       0
		-b is set to:                       1
		-T is set to:                       1.000000
		
		Calculating Partition Funktion and Parsimony Scores
		
		FIRST: preorder: 142 pInT: 142 label: 156 (cmi)
		LAST:  preorder: 224 pInT: 224 label: 272 (str)
		kMax: 13 kMin: 0
		anzahl knoten: 235
		A comparison of Parsimony Scores and Partition function is visualized in the Tree: example/out_PS_PF.ps
		Parsimony Score is stored in example/out_PSb.out
		Partition function score is stored in example/out_PFb.out
		
Usage ePoPE_run.sh


If you like to run multiple alignments over one tree, you can use the ePoPE_run.sh tool. Just edit the script and provide the absolute paths of your data.

PATHEPOPE="/ABSOLUTE_PATH_TO_ePoPE_BINARY/"
ALIGN="/ABSOLUTE_PATH_TO_ALIGNMENT_FILES/"
RESULTS="/ABSOLUTE_PATH_TO_RESULTS_DIRECTORY/"
TREE="/ABSOLUTE_PATH_TO_TREE_FILE/"           
                                          
All results are saved to the provided RESULTS directory
                                                                                    
--                                                                                  
ePoPE 2.1                                                                           
                                                                                    
Auhthor: Gabor Balogh and Jana Hertel:                                              
                                                                                    
         gabor@bioinf.uni-leipzig.de                                                
         jana@bioinf.uni-leipzig.de                                                 
                                                                                    
Date:    April, 2019                                                             
